# compose/core.yaml
# ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
# NEXLIFY CORE SERVICES - Trading Engine & Data Layer
# ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
# Core services using Chainguard images for 97.6% fewer CVEs
# All secrets via file mounts, no environment variables

services:
  # ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
  # 🧠 NEURAL ENGINE - Main Trading Core
  # ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
  nexlify-core:
    image: cgr.dev/chainguard/python:latest-dev
    container_name: nexlify-neural-engine
    profiles: ["core", "full", "production"]
    build:
      context: .
      dockerfile: docker/Dockerfile.core
      args:
        PYTHON_VERSION: ${PYTHON_VERSION:-3.12}
        BUILD_ENV: ${BUILD_ENV:-production}
      cache_from:
        - type=registry,ref=nexlify/cache:core
      cache_to:
        - type=registry,ref=nexlify/cache:core,mode=max
    hostname: nexlify-core
    environment:
      # Core Configuration
      - NEXLIFY_ENV=${NEXLIFY_ENV:-production}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - PYTHONUNBUFFERED=1
      - PYTHONPATH=/app/src
      
      # Service Discovery (via network aliases)
      - VALKEY_HOST=valkey-cache
      - VALKEY_PORT=6379
      - QUESTDB_HOST=questdb-ts
      - QUESTDB_PORT=8812
      - PROMETHEUS_PUSHGATEWAY=prometheus-push:9091
      
      # Performance Tuning
      - UVLOOP_ENABLED=true
      - MAX_WORKERS=${MAX_WORKERS:-8}
      - MEMORY_LIMIT=${MEMORY_LIMIT:-4G}
      - CPU_AFFINITY=${CPU_AFFINITY:-0,1,2,3}
    secrets:
      - source: api_keys
        target: /run/secrets/api_keys.json
        mode: 0400
      - source: mpc_wallet_key  
        target: /run/secrets/mpc_wallet.pem
        mode: 0400
      - source: db_password
        target: /run/secrets/db_password
        mode: 0400
    volumes:
      # Code mounting for development (read-only in production)
      - ./src:/app/src:ro
      - ./config:/app/config:ro
      
      # Data persistence
      - nexlify-trading-data:/app/data
      - nexlify-logs:/app/logs
      
      # Temporary storage with tmpfs for performance
      - type: tmpfs
        target: /app/tmp
        tmpfs:
          size: 500M
          mode: 1777
    ports:
      - "${NEXLIFY_API_PORT:-8888}:8888"     # REST API
      - "${NEXLIFY_WS_PORT:-8889}:8889"      # WebSocket
      - "${NEXLIFY_GRPC_PORT:-8890}:8890"    # gRPC
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; r = requests.get('http://localhost:8888/health'); exit(0 if r.status_code == 200 else 1)"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    depends_on:
      valkey-cache:
        condition: service_healthy
        restart: true
      questdb-ts:
        condition: service_healthy
      db-migration:
        condition: service_completed_successfully
    networks:
      backend:
        aliases:
          - nexlify-core.backend
      database:
      monitoring:
    restart: unless-stopped
    stop_grace_period: 30s
    deploy:
      resources:
        limits:
          cpus: '${NEXLIFY_CPU_LIMIT:-4.0}'
          memory: ${NEXLIFY_MEMORY_LIMIT:-4G}
          pids: 1000
        reservations:
          cpus: '${NEXLIFY_CPU_RESERVE:-1.0}'
          memory: ${NEXLIFY_MEMORY_RESERVE:-1G}
      restart_policy:
        condition: any
        delay: 5s
        max_attempts: 3
        window: 120s
    sysctls:
      - net.core.somaxconn=65535
      - net.ipv4.tcp_max_syn_backlog=65535
    ulimits:
      nofile:
        soft: 65536
        hard: 65536
      memlock:
        soft: -1
        hard: -1
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "10"
        labels: "service=core,component=engine"
        tag: "nexlify.core"

  # ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
  # 💾 VALKEY CACHE - Ultra-fast state management (37% faster than Redis!)
  # ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
  valkey-cache:
    image: valkey/valkey:8.1-alpine  # Valkey doesn't have Chainguard yet
    container_name: nexlify-cache-matrix
    profiles: ["core", "full", "production"]
    hostname: valkey-cache
    volumes:
      - ./config/valkey/valkey.conf:/etc/valkey/valkey.conf:ro
      - valkey-data:/data
      - type: tmpfs
        target: /tmp
        tmpfs:
          size: 100M
    ports:
      - "${VALKEY_PORT:-6379}:6379"
    command: ["valkey-server", "/etc/valkey/valkey.conf"]
    healthcheck:
      test: ["CMD", "valkey-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 20s
    networks:
      database:
        aliases:
          - valkey-cache.database
      backend:
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '${VALKEY_CPU_LIMIT:-2.0}'
          memory: ${VALKEY_MEMORY_LIMIT:-2G}
        reservations:
          cpus: '0.5'
          memory: 512M
    sysctls:
      - net.core.somaxconn=65535
      - vm.overcommit_memory=1
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "5"
        labels: "service=cache,component=valkey"

  # ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
  # 📊 QUESTDB - Time-series database with materialized views
  # ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
  questdb-ts:
    image: questdb/questdb:8.3.1
    container_name: nexlify-timeseries
    profiles: ["core", "full", "production"]
    hostname: questdb-ts
    environment:
      - QDB_TELEMETRY_ENABLED=false
      - JAVA_OPTS=-Xms1g -Xmx4g -XX:+UseG1GC
    volumes:
      - ./config/questdb/server.conf:/opt/questdb/conf/server.conf:ro
      - questdb-data:/var/lib/questdb
      - type: tmpfs
        target: /tmp
        tmpfs:
          size: 1G
    ports:
      - "${QUESTDB_HTTP_PORT:-9000}:9000"   # Web Console
      - "${QUESTDB_PG_PORT:-8812}:8812"     # PostgreSQL protocol
      - "${QUESTDB_ILP_PORT:-9009}:9009"    # InfluxDB Line Protocol
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/status"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    networks:
      database:
        aliases:
          - questdb-ts.database
      backend:
      monitoring:
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '${QUESTDB_CPU_LIMIT:-4.0}'
          memory: ${QUESTDB_MEMORY_LIMIT:-6G}
        reservations:
          cpus: '1.0'
          memory: 2G
    ulimits:
      nofile:
        soft: 65536
        hard: 65536
      memlock:
        soft: -1
        hard: -1
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "10"
        labels: "service=database,component=questdb"

  # ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
  # 🔄 DATABASE MIGRATION - One-time schema setup
  # ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
  db-migration:
    image: cgr.dev/chainguard/python:latest
    container_name: nexlify-db-migration
    profiles: ["core", "full", "production"]
    environment:
      - QUESTDB_URL=postgresql://admin:quest@questdb-ts:8812/nexlify
    secrets:
      - source: db_password
        target: /run/secrets/db_password
        mode: 0400
    volumes:
      - ./migrations:/app/migrations:ro
      - ./scripts/migrate.py:/app/migrate.py:ro
    command: ["python", "/app/migrate.py"]
    depends_on:
      questdb-ts:
        condition: service_healthy
    networks:
      - database
    restart: "no"  # Run once and exit

# ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
# VOLUMES - Persistent data storage
# ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

volumes:
  valkey-data:
    name: nexlify-valkey-data
    driver: local
    labels:
      com.nexlify.volume.type: "cache"
      com.nexlify.volume.backup: "daily"

  questdb-data:
    name: nexlify-questdb-data
    driver: local
    labels:
      com.nexlify.volume.type: "timeseries"
      com.nexlify.volume.backup: "hourly"

  nexlify-trading-data:
    name: nexlify-trading-data
    driver: local
    labels:
      com.nexlify.volume.type: "application"
      com.nexlify.volume.backup: "realtime"

  nexlify-logs:
    name: nexlify-logs
    driver: local
    driver_opts:
      o: "size=10g"
    labels:
      com.nexlify.volume.type: "logs"
      com.nexlify.volume.retention: "30d"
