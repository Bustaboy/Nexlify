version: '3.8'

# Nexlify Trading Platform - Secure Docker Configuration
# Addresses all V3 security improvements

services:
  nexlify:
    build: .
    container_name: nexlify_trading
    restart: unless-stopped
    ports:
      - "127.0.0.1:8000:8000"  # API - localhost only
      - "127.0.0.1:8001:8001"  # Mobile API - localhost only
      - "127.0.0.1:8080:8080"  # WebSocket - localhost only
    environment:
      - PYTHONUNBUFFERED=1
      - NODE_ENV=production
    env_file:
      - .env
    volumes:
      - ./data:/app/data:rw
      - ./logs:/app/logs:rw
      - ./backups:/app/backups:rw
      - ./models:/app/models:ro
      - ./enhanced_config.json:/app/enhanced_config.json:ro
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
    networks:
      - nexlify_network
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; requests.get('http://localhost:8000/health', timeout=10).raise_for_status()"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    security_opt:
      - no-new-privileges:true
    user: "1000:1000"  # Run as non-root user
    read_only: true    # Read-only root filesystem
    tmpfs:
      - /tmp
      - /var/tmp
    
  redis:
    image: redis:7-alpine
    container_name: nexlify_redis
    restart: unless-stopped
    command: >
      redis-server
      --requirepass ${REDIS_PASSWORD}
      --maxmemory 512mb
      --maxmemory-policy allkeys-lru
      --appendonly yes
      --appendfsync everysec
    volumes:
      - redis_data:/data:rw
    networks:
      - nexlify_network
    ports:
      - "127.0.0.1:6379:6379"  # localhost only
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    security_opt:
      - no-new-privileges:true
    user: "999:999"  # Redis user
    
  postgres:
    image: postgres:15-alpine
    container_name: nexlify_postgres
    restart: unless-stopped
    environment:
      - POSTGRES_DB=nexlify
      - POSTGRES_USER=nexlify
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
      - PGDATA=/var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data:rw
      - ./scripts/init_db.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - nexlify_network
    ports:
      - "127.0.0.1:5432:5432"  # localhost only
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U nexlify -d nexlify"]
      interval: 10s
      timeout: 5s
      retries: 5
    security_opt:
      - no-new-privileges:true
    shm_size: 256mb
    
  # Optional: Nginx reverse proxy for production
  nginx:
    image: nginx:alpine
    container_name: nexlify_nginx
    restart: unless-stopped
    ports:
      - "443:443"  # HTTPS only
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - nginx_cache:/var/cache/nginx
    depends_on:
      - nexlify
    networks:
      - nexlify_network
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3
    security_opt:
      - no-new-privileges:true
    profiles:
      - production  # Only run in production

volumes:
  redis_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./docker/volumes/redis
  postgres_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./docker/volumes/postgres
  nginx_cache:
    driver: local

networks:
  nexlify_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
    driver_opts:
      com.docker.network.bridge.name: br-nexlify

# Security configurations
x-security: &default-security
  # Drop all capabilities by default
  cap_drop:
    - ALL
  # Only add what's needed
  cap_add:
    - CHOWN
    - DAC_OVERRIDE
    - SETGID
    - SETUID
