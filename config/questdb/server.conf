# config/questdb/server.conf
# ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
# NEXLIFY TIME SERIES MATRIX - QUESTDB 8.3.1 CONFIGURATION
# ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#
# Optimized for high-frequency cryptocurrency tick data
# Materialized views for real-time OHLC aggregation
# 50-100% WAL performance improvements in 8.x
# 
# "Time is money, choom. And we're about to bend both." - V
#
# ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

################ HTTP Server Configuration ################
# Web Console and REST API endpoint
http.enabled=true

# Bind to all interfaces in container
http.net.bind.to=0.0.0.0:9000

# HTTP request settings
http.net.connection.limit=256
http.net.connection.timeout=300000
http.net.connection.hint=true

# Multipart upload for CSV imports
http.multipart.enabled=true
http.multipart.header.buffer.size=512

# JSON query results
http.json.query.connection.check.frequency=1000000
http.query.cache.enabled=true
http.query.cache.block.count=16
http.query.cache.row.count=16

# Security headers
http.security.readonly=false
http.security.max.req.size=104857600

# Static content (web console)
http.static.index.file.name=index.html
http.static.public.directory=public

################ PostgreSQL Wire Protocol ################
# Enable PostgreSQL wire protocol for compatibility
pg.enabled=true
pg.net.bind.to=0.0.0.0:8812

# Connection settings
pg.connection.pool.capacity=16
pg.password=quest
pg.user=admin
pg.readonly=false

# Max query runtime (5 minutes for complex aggregations)
pg.max.runtime=300000

# Network optimizations
pg.net.connection.limit=128
pg.net.connection.timeout=300000
pg.net.recv.buf.size=1048576
pg.net.send.buf.size=1048576

################ InfluxDB Line Protocol (ILP) ################
# High-performance ingestion for tick data
line.tcp.enabled=true
line.tcp.net.bind.to=0.0.0.0:9009

# ILP performance settings
line.tcp.io.worker.count=4
line.tcp.io.worker.affinity=1,2,3,4
line.tcp.io.halt.on.error=false
line.tcp.timeout=30000
line.tcp.recv.buf.size=2097152

# Message size limits
line.tcp.max.measurement.size=8192
line.tcp.msg.buffer.size=32768

# Auto-create tables and columns
line.auto.create.new.columns=true
line.auto.create.new.tables=true

################ Cairo Engine Configuration ################
# Core storage engine settings

# Default timestamp column name
cairo.default.timestamp.column.name=timestamp

# SQL settings
cairo.sql.copy.buffer.size=2097152
cairo.sql.copy.log.retention.days=3
cairo.sql.compiler.pool.capacity=16

# Page sizes optimized for crypto data patterns
cairo.sql.column.page.size=262144
cairo.sql.fast.map.page.size=4194304
cairo.sql.sampleby.page.size=4194304

# Parallel execution
cairo.sql.parallel.filter.enabled=true
cairo.sql.parallel.filter.pretouch=true

################ O3 (Out-of-Order) Configuration ################
# Critical for handling delayed market data

# Memory allocation per column
cairo.o3.column.memory.size=2097152

# Lag settings for real-time vs historical data
cairo.o3.min.lag=50
cairo.o3.max.lag=10000

# O3 partitioning
cairo.o3.partition.split=daily

################ WAL (Write-Ahead Log) Configuration ################
# 50-100% performance improvement in 8.x

# Enable WAL by default
cairo.wal.enabled.default=true

# WAL parallel application
cairo.wal.apply.worker.count=4
cairo.wal.apply.worker.affinity=1,2,3,4
cairo.wal.apply.worker.halt.on.error=false

# WAL transaction settings
cairo.wal.max.segment.file.descriptors.cache=50
cairo.wal.max.uncommitted.rows=500000
cairo.wal.segment.sync.mode=async

# Purge settings
cairo.wal.purge.interval=30000
cairo.wal.purge.batch.size=100

################ Telemetry (Disabled) ################
telemetry.enabled=false

################ Memory Configuration ################
# Memory limits set dynamically via JVM options
# -Xms1g -Xmx4g recommended for RTX 2070 systems

# Native memory for queries
query.memory.max.pages=2048
query.memory.max.uncommitted.rows=500000

################ Worker Configuration ################
# Shared workers for parallel query execution
shared.worker.count=4
shared.worker.affinity=1,2,3,4
shared.worker.halt.on.error=false

################ Log Configuration ################
# Logging settings
log.level=INFO
log.rotation=daily
log.max.files=30

################ Metrics ################
# Prometheus metrics endpoint
metrics.enabled=true

################ Table Defaults ################
# Default settings for new tables
cairo.max.uncommitted.rows=500000
cairo.default.symbol.capacity=512
cairo.default.symbol.cache=true

# Deduplication for data integrity (NEW in 8.x)
cairo.dedup.enabled=true

################ Performance Optimizations ################
# Vector execution
cairo.vector.aggregate.queue.capacity=256

# Index settings
cairo.index.value.block.size=262144

# Reader pool
cairo.reader.pool.max.segments=16

################ Network Optimizations ################
# TCP settings for low latency
net.tcp.no.delay=true
net.tcp.recv.buf.size=2097152
net.tcp.send.buf.size=2097152

################ Security ################
# Authentication (configure in production)
# pg.security.enabled=true
# http.security.enabled=true

################ Custom Settings for Crypto Trading ################
# These would be set via SQL after startup:
#
# -- Create main trades table with hourly partitions
# CREATE TABLE trades (
#     timestamp TIMESTAMP,
#     symbol SYMBOL CAPACITY 512 CACHE,
#     side SYMBOL CAPACITY 8 CACHE,
#     price DOUBLE,
#     amount DOUBLE,
#     exchange SYMBOL CAPACITY 64 CACHE
# ) TIMESTAMP(timestamp) PARTITION BY HOUR WAL
# DEDUP UPSERT KEYS(timestamp, symbol, exchange);
#
# -- Create materialized view for 1-second OHLC
# CREATE MATERIALIZED VIEW ohlc_1s AS
# SELECT 
#     timestamp,
#     symbol,
#     first(price) as open,
#     max(price) as high,
#     min(price) as low,
#     last(price) as close,
#     sum(amount) as volume
# FROM trades
# SAMPLE BY 1s
# FILL(PREV);
#
# -- Create cascading views for other timeframes
# CREATE MATERIALIZED VIEW ohlc_1m AS
# SELECT * FROM ohlc_1s SAMPLE BY 1m;
#
# CREATE MATERIALIZED VIEW ohlc_5m AS
# SELECT * FROM ohlc_1m SAMPLE BY 5m;
#
# ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
