# config/nginx/conf.d/grpc.conf
# ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
# NEXLIFY ML ENGINE GATEWAY - NEURAL NETWORK gRPC INTERFACE
# ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
# High-performance gRPC proxy for ML model inference and training
# Optimized for TimesFM, Chronos, and iTransformer ensemble

server {
    listen 8890 http2;
    listen [::]:8890 http2;
    server_name ${GRPC_DOMAIN};
    
    # ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    # gRPC CONFIGURATION - Binary protocol optimization
    # ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    
    # Larger buffers for ML model data
    client_body_buffer_size 1m;
    client_max_body_size 100m;  # Large enough for model tensors
    
    # gRPC-specific timeouts
    grpc_send_timeout 300s;
    grpc_read_timeout 300s;
    
    # HTTP/2 settings for gRPC
    http2_max_field_size 16k;
    http2_max_header_size 32k;
    http2_max_requests 10000;
    
    # ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    # ML PREDICTION SERVICE - Real-time inference
    # ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    
    location /nexlify.ml.PredictionService/ {
        # gRPC pass to ML engine
        grpc_pass grpcs://ml-engine:8891;
        
        # gRPC-specific error handling
        error_page 502 = /error502grpc;
        
        # Performance optimizations
        grpc_buffer_size 64k;
        grpc_next_upstream_timeout 10s;
        grpc_next_upstream_tries 2;
        
        # Circuit breaker pattern
        grpc_next_upstream error timeout invalid_header http_500 http_502 http_503;
        
        # Add ML-specific headers
        grpc_set_header X-Model-Version ${MODEL_VERSION};
        grpc_set_header X-Inference-Priority "real-time";
        
        # OpenTelemetry for ML observability
        opentelemetry on;
        opentelemetry_operation_name "ml_prediction";
        opentelemetry_propagate;
    }
    
    # ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    # MODEL TRAINING SERVICE - Batch operations
    # ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    
    location /nexlify.ml.TrainingService/ {
        # Different backend for training
        grpc_pass grpcs://ml-training:8892;
        
        # Extended timeouts for long-running operations
        grpc_read_timeout 3600s;  # 1 hour for training
        grpc_send_timeout 600s;   # 10 min for data upload
        
        # Large buffer for training data
        client_body_buffer_size 10m;
        client_max_body_size 1g;
        
        # Training-specific headers
        grpc_set_header X-GPU-Request "required";
        grpc_set_header X-Training-Mode "distributed";
    }
    
    # ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    # MODEL MANAGEMENT SERVICE - CRUD operations
    # ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    
    location /nexlify.ml.ModelService/ {
        grpc_pass grpcs://ml-engine:8891;
        
        # Standard timeouts for management ops
        grpc_read_timeout 60s;
        grpc_send_timeout 60s;
        
        # Model versioning headers
        grpc_set_header X-Model-Registry "nexlify-models";
    }
    
    # ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    # STREAMING PREDICTIONS - Real-time market analysis
    # ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    
    location /nexlify.ml.StreamingService/ {
        grpc_pass grpcs://ml-engine:8891;
        
        # Streaming optimizations
        grpc_buffer_size 16k;  # Smaller buffer for low latency
        grpc_read_timeout 86400s;  # 24 hours for streams
        
        # Disable buffering for real-time streaming
        grpc_buffering off;
        
        # Stream-specific headers
        grpc_set_header X-Stream-Type "bidirectional";
        grpc_set_header X-Latency-Target "sub-100ms";
    }
    
    # ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    # HEALTH CHECK - gRPC health protocol
    # ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    
    location /grpc.health.v1.Health/Check {
        grpc_pass grpcs://ml-engine:8891;
        
        # Fast timeout for health checks
        grpc_read_timeout 5s;
        grpc_send_timeout 5s;
        
        # No logging for health checks
        access_log off;
    }
    
    # ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    # REFLECTION SERVICE - Development only
    # ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    
    location /grpc.reflection.v1alpha.ServerReflection/ServerReflectionInfo {
        # Only allow in development
        set $is_dev ${NEXLIFY_ENV};
        if ($is_dev != "development") {
            return 403;
        }
        
        grpc_pass grpcs://ml-engine:8891;
        
        # Reflection metadata
        grpc_set_header X-Reflection-Enabled "true";
    }
    
    # ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    # ERROR HANDLING - gRPC status codes
    # ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    
    location = /error502grpc {
        internal;
        default_type application/grpc;
        add_header grpc-status 14;  # UNAVAILABLE
        add_header grpc-message "ML engine neural link severed";
        return 204;
    }
    
    # Custom error pages for gRPC
    error_page 400 = @grpc_internal_error;
    error_page 401 = @grpc_unauthenticated;
    error_page 403 = @grpc_permission_denied;
    error_page 404 = @grpc_unimplemented;
    error_page 429 = @grpc_resource_exhausted;
    error_page 502 = @grpc_unavailable;
    error_page 503 = @grpc_unavailable;
    error_page 504 = @grpc_deadline_exceeded;
    
    location @grpc_internal_error {
        internal;
        default_type application/grpc;
        add_header grpc-status 13;  # INTERNAL
        add_header grpc-message "Neural matrix malfunction";
        return 204;
    }
    
    location @grpc_unauthenticated {
        internal;
        default_type application/grpc;
        add_header grpc-status 16;  # UNAUTHENTICATED
        add_header grpc-message "Neural authentication required";
        return 204;
    }
    
    location @grpc_permission_denied {
        internal;
        default_type application/grpc;
        add_header grpc-status 7;  # PERMISSION_DENIED
        add_header grpc-message "Access to neural network denied";
        return 204;
    }
    
    location @grpc_unimplemented {
        internal;
        default_type application/grpc;
        add_header grpc-status 12;  # UNIMPLEMENTED
        add_header grpc-message "Neural pathway not implemented";
        return 204;
    }
    
    location @grpc_resource_exhausted {
        internal;
        default_type application/grpc;
        add_header grpc-status 8;  # RESOURCE_EXHAUSTED
        add_header grpc-message "Neural capacity exceeded - cool your jets, choom";
        return 204;
    }
    
    location @grpc_unavailable {
        internal;
        default_type application/grpc;
        add_header grpc-status 14;  # UNAVAILABLE
        add_header grpc-message "ML engine offline - rebooting neural matrix";
        return 204;
    }
    
    location @grpc_deadline_exceeded {
        internal;
        default_type application/grpc;
        add_header grpc-status 4;  # DEADLINE_EXCEEDED
        add_header grpc-message "Neural computation timeout - try a simpler query";
        return 204;
    }
}

# ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
# SECURE gRPC SERVER - TLS/mTLS configuration
# ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

server {
    listen 8443 ssl http2;
    listen [::]:8443 ssl http2;
    server_name ${GRPC_DOMAIN};
    
    # SSL configuration
    ssl_certificate /etc/nginx/certs/${GRPC_CERT_NAME}.crt;
    ssl_certificate_key /etc/nginx/certs/${GRPC_CERT_NAME}.key;
    
    # mTLS for service-to-service auth
    ssl_client_certificate /etc/nginx/certs/ca.crt;
    ssl_verify_client on;
    ssl_verify_depth 2;
    
    # Forward all requests to the main gRPC server
    location / {
        grpc_pass grpc://127.0.0.1:8890;
        
        # Add client cert info to headers
        grpc_set_header X-Client-Cert-CN $ssl_client_s_dn_cn;
        grpc_set_header X-Client-Verified $ssl_client_verify;
    }
}
