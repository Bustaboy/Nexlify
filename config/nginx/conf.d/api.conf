# config/nginx/conf.d/api.conf
# ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
# NEXLIFY TRADING API GATEWAY - REAL-TIME MARKET NEURAL INTERFACE
# ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
# Handles REST API, WebSocket streams, and real-time market data feeds
# Optimized for sub-millisecond latency with aggressive caching

server {
    listen 80;
    listen [::]:80;
    server_name ${API_DOMAIN};
    
    # Redirect HTTP to HTTPS
    return 301 https://$server_name$request_uri;
}

server {
    listen 443 ssl http2;
    listen [::]:443 ssl http2;
    listen 443 quic reuseport;
    listen [::]:443 quic reuseport;
    
    server_name ${API_DOMAIN};
    
    # ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    # SSL CONFIGURATION - Financial-grade encryption
    # ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    
    ssl_certificate /etc/nginx/certs/${SSL_CERT_NAME}.crt;
    ssl_certificate_key /etc/nginx/certs/${SSL_CERT_NAME}.key;
    ssl_dhparam /etc/nginx/certs/dhparam.pem;
    
    # Enable HTTP/3
    add_header Alt-Svc 'h3=":443"; ma=86400' always;
    ssl_early_data on;
    
    # Custom security headers for API
    add_header Content-Security-Policy "default-src 'none'; connect-src 'self' wss://${API_DOMAIN}; script-src 'none'; style-src 'none'; img-src 'none'; font-src 'none'; frame-ancestors 'none'; base-uri 'none'; form-action 'none';" always;
    add_header X-API-Version "${API_VERSION}" always;
    
    # ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    # RATE LIMITING - Per-endpoint protection
    # ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    
    # Apply general rate limit
    limit_req zone=api burst=20 delay=10;
    limit_conn conn_limit 50;
    
    # ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    # HEALTH CHECK ENDPOINT - No auth, no logging
    # ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    
    location = /health {
        access_log off;
        add_header Content-Type text/plain;
        return 200 "Neural matrix online\n";
    }
    
    location = /ready {
        access_log off;
        proxy_pass http://nexlify_backend/ready;
        proxy_read_timeout 5s;
    }
    
    # ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    # METRICS ENDPOINT - Prometheus scraping
    # ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    
    location /metrics {
        allow 10.0.0.0/8;      # Internal network
        allow 172.16.0.0/12;   # Docker networks
        allow 127.0.0.1;       # Localhost
        deny all;
        
        proxy_pass http://nexlify_backend/metrics;
        proxy_read_timeout 10s;
    }
    
    # ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    # API V1 ENDPOINTS - REST API with caching
    # ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    
    location /api/v1/ {
        # OpenTelemetry tracing
        opentelemetry on;
        opentelemetry_operation_name "nexlify_api_request";
        opentelemetry_propagate;
        
        # Trading-specific rate limit
        limit_req zone=trading burst=100 nodelay;
        
        # Proxy to backend
        proxy_pass http://nexlify_backend;
        
        # Custom timeouts for trading operations
        proxy_read_timeout 30s;
        proxy_send_timeout 10s;
        
        # Cache configuration for market data
        proxy_cache_methods GET HEAD;
        proxy_cache_valid 200 1s;  # 1 second microcaching
        proxy_cache_valid 404 10s;
        proxy_cache_use_stale error timeout updating http_500 http_502 http_503 http_504;
        proxy_cache_background_update on;
        proxy_cache_lock on;
        
        # Add response headers
        add_header X-Cache-Status $upstream_cache_status;
        add_header X-Response-Time $request_time;
    }
    
    # ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    # WEBSOCKET ENDPOINTS - Real-time market streams
    # ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    
    location /ws/ {
        # WebSocket-specific rate limit (connection establishment only)
        limit_req zone=websocket burst=5;
        
        # WebSocket proxy configuration
        proxy_pass http://websocket_backend;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection $connection_upgrade;
        
        # Long timeouts for persistent connections
        proxy_read_timeout 86400s;
        proxy_send_timeout 86400s;
        
        # Disable buffering for real-time data
        proxy_buffering off;
        
        # WebSocket frame size for market data
        proxy_max_temp_file_size 0;
        client_max_body_size 10m;
        
        # Security headers for WebSocket
        add_header X-Frame-Options "DENY" always;
    }
    
    # Specific WebSocket endpoints with different configurations
    location = /ws/market/live {
        # Ultra-low latency for live market data
        limit_req zone=websocket burst=1 nodelay;
        
        proxy_pass http://websocket_backend/market/live;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection $connection_upgrade;
        
        # Minimal timeouts for fast failure detection
        proxy_read_timeout 300s;
        proxy_send_timeout 60s;
        proxy_buffering off;
        
        # TCP optimizations
        tcp_nodelay on;
        tcp_nopush off;
    }
    
    location = /ws/orders {
        # Order stream with authentication check
        limit_req zone=websocket burst=1 nodelay;
        
        # Authentication validation
        auth_request /auth/validate;
        auth_request_set $auth_status $upstream_status;
        
        proxy_pass http://websocket_backend/orders;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection $connection_upgrade;
        proxy_set_header X-Auth-Status $auth_status;
        
        proxy_read_timeout 3600s;
        proxy_buffering off;
    }
    
    # ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    # AUTHENTICATION ENDPOINT - Internal only
    # ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    
    location = /auth/validate {
        internal;
        proxy_pass http://nexlify_backend/auth/validate;
        proxy_pass_request_body off;
        proxy_set_header Content-Length "";
        proxy_set_header X-Original-URI $request_uri;
        proxy_set_header X-Original-Method $request_method;
    }
    
    # ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    # TRADING ENGINE ENDPOINTS - High-frequency operations
    # ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    
    location /api/v1/orders {
        # Strict rate limiting for order placement
        limit_req zone=trading burst=10 nodelay;
        
        # No caching for trading operations
        proxy_cache off;
        proxy_buffering off;
        
        # Fast timeouts
        proxy_connect_timeout 1s;
        proxy_send_timeout 2s;
        proxy_read_timeout 5s;
        
        proxy_pass http://nexlify_backend;
        
        # Add trading headers
        add_header X-Trading-Latency $request_time always;
        add_header X-Order-Gateway "nexlify-nginx" always;
    }
    
    # ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    # ERROR PAGES - Cyberpunk themed
    # ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    
    error_page 404 /404.json;
    location = /404.json {
        internal;
        add_header Content-Type application/json;
        return 404 '{"error":"Neural pathway not found","code":"FLATLINE_404","message":"The matrix has no record of this endpoint"}';
    }
    
    error_page 429 /429.json;
    location = /429.json {
        internal;
        add_header Content-Type application/json;
        add_header Retry-After 60;
        return 429 '{"error":"Neural overload detected","code":"RATE_LIMIT_429","message":"Your neural interface is transmitting too fast. Cool down, choom."}';
    }
    
    error_page 500 502 503 504 /50x.json;
    location = /50x.json {
        internal;
        add_header Content-Type application/json;
        return 500 '{"error":"System malfunction","code":"SYSTEM_ERROR_500","message":"The neural matrix experienced a critical error. Rebooting subsystems..."}';
    }
}
