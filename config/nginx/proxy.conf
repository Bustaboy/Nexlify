# config/nginx/proxy.conf
# ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
# NEXLIFY GENERIC PROXY TEMPLATE - UNIVERSAL NEURAL INTERFACE
# ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
# Reusable proxy configuration for any backend service
# Copy and customize for new services - handles 90% of proxy needs

# ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
# TEMPLATE UPSTREAM - Replace with your service
# ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

upstream template_backend {
    # Load balancing algorithm (choose one)
    # least_conn;        # Least connections
    # ip_hash;           # Session persistence
    # hash $request_uri; # URI-based routing
    # random;            # Random selection
    least_conn;
    
    # Backend servers (add as many as needed)
    server ${BACKEND_HOST:-backend}:${BACKEND_PORT:-8080} max_fails=3 fail_timeout=30s weight=1;
    # server backend2:8080 max_fails=3 fail_timeout=30s weight=2 backup;
    
    # Connection pooling
    keepalive 32;
    keepalive_timeout 60s;
    keepalive_requests 100;
}

# ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
# TEMPLATE SERVER BLOCK - Copy and modify
# ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

server {
    listen ${SERVICE_PORT:-8081};
    listen [::]:${SERVICE_PORT:-8081};
    server_name ${SERVICE_DOMAIN:-_};
    
    # ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    # ACCESS CONTROL - Modify based on security needs
    # ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    
    # Option 1: Allow all (public service)
    # No restrictions
    
    # Option 2: Internal only
    # allow 10.0.0.0/8;
    # allow 172.16.0.0/12;
    # allow 192.168.0.0/16;
    # allow 127.0.0.1;
    # deny all;
    
    # Option 3: Specific IPs
    # allow ${ALLOWED_IP_1};
    # allow ${ALLOWED_IP_2};
    # deny all;
    
    # ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    # RATE LIMITING - Adjust based on service capacity
    # ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    
    limit_req zone=general burst=10 delay=5;
    limit_conn conn_limit 20;
    
    # ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    # MAIN PROXY LOCATION - Core proxy configuration
    # ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    
    location / {
        # Basic proxy settings
        proxy_pass http://template_backend;
        proxy_redirect off;
        
        # Standard proxy headers
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Forwarded-Host $host;
        proxy_set_header X-Forwarded-Port $server_port;
        proxy_set_header X-Request-ID $request_id;
        
        # Timeout configuration (adjust based on service)
        proxy_connect_timeout ${PROXY_CONNECT_TIMEOUT:-10s};
        proxy_send_timeout ${PROXY_SEND_TIMEOUT:-30s};
        proxy_read_timeout ${PROXY_READ_TIMEOUT:-60s};
        
        # Buffer configuration
        proxy_buffering ${PROXY_BUFFERING:-on};
        proxy_buffer_size ${PROXY_BUFFER_SIZE:-8k};
        proxy_buffers ${PROXY_BUFFERS:-16} ${PROXY_BUFFER_SIZE:-8k};
        proxy_busy_buffers_size ${PROXY_BUSY_BUFFERS_SIZE:-16k};
        proxy_temp_file_write_size ${PROXY_TEMP_FILE_WRITE_SIZE:-64k};
        
        # Request/response size limits
        client_max_body_size ${CLIENT_MAX_BODY_SIZE:-10m};
        client_body_buffer_size ${CLIENT_BODY_BUFFER_SIZE:-128k};
        
        # Optional: Request ID generation
        set $request_id $request_id;
        if ($request_id = "") {
            set $request_id $request_time-$msec;
        }
        
        # Optional: OpenTelemetry tracing
        # opentelemetry on;
        # opentelemetry_operation_name "${SERVICE_NAME:-service}_request";
        # opentelemetry_propagate;
    }
    
    # ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    # HEALTH CHECK - Standard endpoint
    # ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    
    location = /health {
        access_log off;
        
        # Option 1: Simple nginx health
        add_header Content-Type text/plain;
        return 200 "healthy\n";
        
        # Option 2: Backend health check
        # proxy_pass http://template_backend/health;
        # proxy_read_timeout 5s;
    }
    
    # ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    # STATIC CONTENT - Optional caching
    # ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    
    location ~* \.(jpg|jpeg|png|gif|ico|css|js|svg|woff|woff2|ttf|eot)$ {
        proxy_pass http://template_backend;
        
        # Aggressive caching for static assets
        expires ${STATIC_CACHE_DURATION:-30d};
        add_header Cache-Control "public, immutable";
        
        # Optional: Remove cookies from static content
        proxy_hide_header Set-Cookie;
        proxy_ignore_headers Set-Cookie;
    }
    
    # ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    # API ENDPOINTS - JSON-specific handling
    # ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    
    location ~ ^/api/ {
        proxy_pass http://template_backend;
        
        # API-specific headers
        proxy_set_header Accept "application/json";
        proxy_set_header Content-Type "application/json";
        
        # No caching for API responses (usually)
        proxy_cache off;
        add_header Cache-Control "no-store, no-cache, must-revalidate, proxy-revalidate, max-age=0";
        
        # CORS headers (if needed)
        # add_header Access-Control-Allow-Origin "${CORS_ORIGIN:-*}" always;
        # add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS" always;
        # add_header Access-Control-Allow-Headers "Authorization, Content-Type, X-Request-ID" always;
        # add_header Access-Control-Max-Age 86400 always;
        
        # Handle preflight requests
        if ($request_method = OPTIONS) {
            add_header Access-Control-Allow-Origin "${CORS_ORIGIN:-*}" always;
            add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS" always;
            add_header Access-Control-Allow-Headers "Authorization, Content-Type, X-Request-ID" always;
            add_header Access-Control-Max-Age 86400;
            add_header Content-Length 0;
            add_header Content-Type text/plain;
            return 204;
        }
    }
    
    # ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    # WEBSOCKET SUPPORT - Optional
    # ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    
    # location /ws {
    #     proxy_pass http://template_backend;
    #     proxy_http_version 1.1;
    #     proxy_set_header Upgrade $http_upgrade;
    #     proxy_set_header Connection $connection_upgrade;
    #     proxy_read_timeout 86400s;
    #     proxy_buffering off;
    # }
    
    # ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    # AUTHENTICATION - Optional auth_request
    # ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    
    # location /protected/ {
    #     auth_request /auth;
    #     auth_request_set $auth_status $upstream_status;
    #     
    #     proxy_pass http://template_backend;
    #     proxy_set_header X-Auth-Status $auth_status;
    # }
    # 
    # location = /auth {
    #     internal;
    #     proxy_pass http://auth_service/validate;
    #     proxy_pass_request_body off;
    #     proxy_set_header Content-Length "";
    #     proxy_set_header X-Original-URI $request_uri;
    # }
    
    # ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    # ERROR HANDLING - Custom error pages
    # ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    
    # Intercept backend errors
    proxy_intercept_errors on;
    
    error_page 404 = @error_404;
    error_page 500 502 503 504 = @error_50x;
    
    location @error_404 {
        internal;
        default_type application/json;
        return 404 '{"error":"Not Found","message":"The requested resource does not exist","code":404}';
    }
    
    location @error_50x {
        internal;
        default_type application/json;
        return 500 '{"error":"Internal Server Error","message":"Service temporarily unavailable","code":500}';
    }
}

# ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
# SSL TEMPLATE - For HTTPS services
# ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

# server {
#     listen 443 ssl http2;
#     listen [::]:443 ssl http2;
#     server_name ${SERVICE_DOMAIN};
#     
#     # SSL configuration
#     ssl_certificate /etc/nginx/certs/${SERVICE_DOMAIN}.crt;
#     ssl_certificate_key /etc/nginx/certs/${SERVICE_DOMAIN}.key;
#     
#     # Include all location blocks from above
#     include /etc/nginx/conf.d/proxy-locations.conf;
# }
# 
# # HTTP to HTTPS redirect
# server {
#     listen 80;
#     listen [::]:80;
#     server_name ${SERVICE_DOMAIN};
#     return 301 https://$server_name$request_uri;
# }

# ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
# USAGE INSTRUCTIONS
# ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#
# 1. Copy this template to a new file:
#    cp proxy.conf myservice.conf
#
# 2. Replace 'template_backend' with your service name
#
# 3. Update environment variables:
#    - SERVICE_PORT: Port to listen on
#    - SERVICE_DOMAIN: Domain name (or _ for any)
#    - BACKEND_HOST: Your backend service hostname
#    - BACKEND_PORT: Your backend service port
#
# 4. Adjust configuration:
#    - Choose load balancing algorithm
#    - Set appropriate timeouts
#    - Configure rate limiting
#    - Enable/disable features as needed
#
# 5. Test configuration:
#    nginx -t
#
# 6. Reload nginx:
#    nginx -s reload
#
# ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
