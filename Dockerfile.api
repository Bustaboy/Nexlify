# Dockerfile.api
# Nexlify API Backend - The Trading Brain Container
# Optimized for performance and security

FROM python:3.11-slim-bullseye AS base

# Install system dependencies
RUN apt-get update && apt-get install -y \
    build-essential \
    curl \
    git \
    libpq-dev \
    libssl-dev \
    libffi-dev \
    && rm -rf /var/lib/apt/lists/*

# Create app user - don't run as root in Night City
RUN useradd -m -u 1000 nexlify && \
    mkdir -p /app && \
    chown -R nexlify:nexlify /app

WORKDIR /app

# Install Python dependencies
COPY requirements.txt .
RUN pip install --no-cache-dir --upgrade pip && \
    pip install --no-cache-dir -r requirements.txt

# Copy application code
COPY --chown=nexlify:nexlify ./src ./src
COPY --chown=nexlify:nexlify ./config ./config
COPY --chown=nexlify:nexlify ./alembic.ini .

# Create necessary directories
RUN mkdir -p logs models data && \
    chown -R nexlify:nexlify logs models data

# Switch to app user
USER nexlify

# Expose API port
EXPOSE 8000

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=40s --retries=3 \
    CMD curl -f http://localhost:8000/health || exit 1

# Run the API
CMD ["uvicorn", "src.api.main:app", "--host", "0.0.0.0", "--port", "8000", "--workers", "4"]

---

# Dockerfile.frontend
# Nexlify Frontend - The Chrome UI Container
# React + Electron packaged for the web

FROM node:18-alpine AS builder

WORKDIR /app

# Copy package files
COPY frontend/package*.json ./

# Install dependencies
RUN npm ci --only=production

# Copy frontend code
COPY frontend/ .

# Build the application
RUN npm run build

# Production stage
FROM nginx:alpine

# Copy built files
COPY --from=builder /app/build /usr/share/nginx/html

# Copy nginx configuration
COPY nginx/frontend.conf /etc/nginx/conf.d/default.conf

# Expose port
EXPOSE 3000

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=40s --retries=3 \
    CMD curl -f http://localhost:3000 || exit 1

# Run nginx
CMD ["nginx", "-g", "daemon off;"]

---

# Dockerfile.ml
# Nexlify ML Worker - Neural Training Container
# GPU-optimized for training trading models

FROM nvidia/cuda:11.8.0-cudnn8-runtime-ubuntu22.04

# Install Python and system dependencies
RUN apt-get update && apt-get install -y \
    python3.11 \
    python3.11-dev \
    python3-pip \
    build-essential \
    curl \
    git \
    libpq-dev \
    && rm -rf /var/lib/apt/lists/*

# Set Python 3.11 as default
RUN update-alternatives --install /usr/bin/python python /usr/bin/python3.11 1 && \
    update-alternatives --install /usr/bin/pip pip /usr/bin/pip3 1

WORKDIR /app

# Install PyTorch with CUDA support
RUN pip install --no-cache-dir \
    torch==2.1.0+cu118 \
    torchvision==0.16.0+cu118 \
    torchaudio==2.1.0+cu118 \
    --index-url https://download.pytorch.org/whl/cu118

# Install ML dependencies
COPY requirements-ml.txt .
RUN pip install --no-cache-dir -r requirements-ml.txt

# Copy ML code
COPY --chown=1000:1000 ./src/ml ./src/ml
COPY --chown=1000:1000 ./src/config ./src/config
COPY --chown=1000:1000 ./src/database ./src/database

# Create directories
RUN mkdir -p models data logs && \
    chown -R 1000:1000 models data logs

USER 1000

# Run ML worker
CMD ["python", "-m", "src.ml.training_worker"]

---

# requirements.txt
# Nexlify Python Dependencies - The Neural Augmentations

# Core Framework
fastapi==0.104.1
uvicorn[standard]==0.24.0
pydantic==2.5.0
python-multipart==0.0.6

# Database
sqlalchemy==2.0.23
alembic==1.12.1
psycopg2-binary==2.9.9
asyncpg==0.29.0

# Caching & Queuing
redis==5.0.1
celery==5.3.4
fakeredis==2.20.0

# Security
python-jose[cryptography]==3.3.0
passlib[argon2,bcrypt]==1.7.4
pyotp==2.9.0
qrcode[pil]==7.4.2
cryptography==41.0.7

# ML & Data Science
numpy==1.24.3
pandas==2.1.3
scikit-learn==1.3.2
ta==0.10.2
statsmodels==0.14.0

# Async & Networking
aiohttp==3.9.0
websockets==12.0
httpx==0.25.2
ccxt==4.1.56

# Monitoring & Logging
prometheus-client==0.19.0
opentelemetry-api==1.21.0
opentelemetry-sdk==1.21.0
opentelemetry-exporter-jaeger==1.21.0
opentelemetry-instrumentation-fastapi==0.42b0
opentelemetry-instrumentation-sqlalchemy==0.42b0
structlog==23.2.0
python-json-logger==2.0.7

# Testing
pytest==7.4.3
pytest-asyncio==0.21.1
pytest-cov==4.1.0
pytest-mock==3.12.0
faker==20.0.3
factory-boy==3.3.0
hypothesis==6.92.1

# CLI & Utils
click==8.1.7
rich==13.7.0
tabulate==0.9.0
python-dotenv==1.0.0
pyyaml==6.0.1

# Development
black==23.12.0
flake8==6.1.0
mypy==1.7.1
pre-commit==3.6.0

---

# requirements-ml.txt
# Additional ML-specific dependencies

# PyTorch ecosystem (installed separately in Dockerfile.ml)
# torch==2.1.0
# torchvision==0.16.0
# torchaudio==2.1.0

# Transformers & NLP
transformers==4.35.2
tokenizers==0.15.0
datasets==2.15.0

# Distributed Computing
ray[default]==2.8.0
dask[complete]==2023.12.0

# Advanced ML
xgboost==2.0.2
lightgbm==4.1.0
optuna==3.5.0

# Visualization (for ML)
matplotlib==3.8.2
seaborn==0.13.0
plotly==5.18.0

# Additional utilities
joblib==1.3.2
tqdm==4.66.1
tensorboard==2.15.1

---

# nginx/nginx.conf
# Nginx Configuration - The Digital Gatekeeper

user nginx;
worker_processes auto;
error_log /var/log/nginx/error.log warn;
pid /var/run/nginx.pid;

events {
    worker_connections 1024;
    use epoll;
    multi_accept on;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    # Logging
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for"';
    
    access_log /var/log/nginx/access.log main;

    # Performance
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;
    client_max_body_size 50M;

    # Gzip compression
    gzip on;
    gzip_vary on;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_types text/plain text/css text/xml text/javascript 
               application/json application/javascript application/xml+rss 
               application/rss+xml application/atom+xml image/svg+xml;

    # Security headers
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;
    add_header Content-Security-Policy "default-src 'self' http: https: data: blob: 'unsafe-inline'" always;

    # Rate limiting
    limit_req_zone $binary_remote_addr zone=api_limit:10m rate=10r/s;
    limit_req_zone $binary_remote_addr zone=auth_limit:10m rate=5r/m;

    # Upstream servers
    upstream api_backend {
        least_conn;
        server nexlify-api:8000 max_fails=3 fail_timeout=30s;
    }

    upstream frontend {
        server nexlify-frontend:3000;
    }

    # HTTP to HTTPS redirect
    server {
        listen 80;
        server_name _;
        return 301 https://$host$request_uri;
    }

    # Main HTTPS server
    server {
        listen 443 ssl http2;
        server_name _;

        # SSL configuration
        ssl_certificate /etc/nginx/ssl/cert.pem;
        ssl_certificate_key /etc/nginx/ssl/key.pem;
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers HIGH:!aNULL:!MD5;
        ssl_prefer_server_ciphers on;
        ssl_session_cache shared:SSL:10m;
        ssl_session_timeout 10m;

        # Frontend
        location / {
            proxy_pass http://frontend;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_cache_bypass $http_upgrade;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # API
        location /api/ {
            limit_req zone=api_limit burst=20 nodelay;
            
            rewrite ^/api/(.*) /$1 break;
            proxy_pass http://api_backend;
            proxy_http_version 1.1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # Timeouts for long-running requests
            proxy_connect_timeout 60s;
            proxy_send_timeout 60s;
            proxy_read_timeout 60s;
        }

        # WebSocket
        location /ws/ {
            proxy_pass http://api_backend;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # WebSocket timeouts
            proxy_connect_timeout 7d;
            proxy_send_timeout 7d;
            proxy_read_timeout 7d;
        }

        # Auth endpoints with stricter rate limiting
        location ~ ^/api/auth/(login|register) {
            limit_req zone=auth_limit burst=5 nodelay;
            
            rewrite ^/api/(.*) /$1 break;
            proxy_pass http://api_backend;
            proxy_http_version 1.1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # Monitoring endpoints
        location /metrics {
            allow 172.20.0.0/16;  # Docker network
            deny all;
            proxy_pass http://api_backend/metrics;
        }

        # Health check
        location /health {
            access_log off;
            proxy_pass http://api_backend/health;
        }
    }
}

---

# monitoring/prometheus.yml
# Prometheus Configuration - The All-Seeing Eye

global:
  scrape_interval: 15s
  evaluation_interval: 15s
  external_labels:
    monitor: 'nexlify-monitor'

scrape_configs:
  # Nexlify API metrics
  - job_name: 'nexlify-api'
    static_configs:
      - targets: ['nexlify-api:8000']
    metrics_path: '/metrics'
    scrape_interval: 5s

  # PostgreSQL exporter
  - job_name: 'postgres'
    static_configs:
      - targets: ['postgres-exporter:9187']

  # Redis exporter
  - job_name: 'redis'
    static_configs:
      - targets: ['redis-exporter:9121']

  # Node exporter for system metrics
  - job_name: 'node'
    static_configs:
      - targets: ['node-exporter:9100']

  # Prometheus self-monitoring
  - job_name: 'prometheus'
    static_configs:
      - targets: ['localhost:9090']

# Alerting rules
rule_files:
  - '/etc/prometheus/alerts/*.yml'

# Alertmanager configuration
alerting:
  alertmanagers:
    - static_configs:
        - targets: ['alertmanager:9093']
