# haproxy-ingress.yaml
# âš¡ HAPROXY INGRESS CONTROLLER - THE SPEED DAEMON
# Location: k3s/manifests/haproxy-ingress.yaml
# 42,000 RPS of pure chrome, FIX protocol support built-in
apiVersion: v1
kind: ConfigMap
metadata:
  name: haproxy-config
  namespace: nexlify-trading
data:
  haproxy.cfg: |
    global
        # Performance tuning - squeeze every microsecond
        maxconn 100000
        nbthread 8
        cpu-map auto:1/1-8 0-7
        
        # Security hardening
        tune.ssl.default-dh-param 2048
        ssl-default-bind-ciphers ECDHE+AESGCM:ECDHE+CHACHA20
        ssl-default-bind-options no-sslv3 no-tlsv10 no-tlsv11
        
        # Logging for the data hounds
        log stdout local0
        
    defaults
        mode http
        timeout connect 5s
        timeout client  30s
        timeout server  30s
        timeout http-request 10s
        timeout http-keep-alive 30s
        
        # Chrome-level error handling
        option httplog
        option dontlognull
        option http-server-close
        option forwardfor except 127.0.0.0/8
        
        # Circuit breaker patterns
        retries 3
        option redispatch
        
    # Stats interface - know your network's soul
    listen stats
        bind *:8404
        stats enable
        stats uri /stats
        stats refresh 10s
        stats admin if TRUE
---
apiVersion: v1
kind: Service
metadata:
  name: haproxy-ingress
  namespace: nexlify-trading
  labels:
    app: nexlify
    component: haproxy
spec:
  type: LoadBalancer
  loadBalancerSourceRanges:
  - 0.0.0.0/0  # Adjust for your security needs
  selector:
    app: nexlify
    component: haproxy
  ports:
  - name: http
    port: 80
    targetPort: 80
  - name: https
    port: 443
    targetPort: 443
  - name: stats
    port: 8404
    targetPort: 8404
  - name: fix
    port: 8201
    targetPort: 8201  # FIX protocol for institutional trading
---
apiVersion: apps/v1
kind: DaemonSet  # One per node for maximum performance
metadata:
  name: haproxy-ingress
  namespace: nexlify-trading
  labels:
    app: nexlify
    component: haproxy
spec:
  selector:
    matchLabels:
      app: nexlify
      component: haproxy
  template:
    metadata:
      labels:
        app: nexlify
        component: haproxy
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9101"
    spec:
      # Network performance optimizations
      hostNetwork: true
      dnsPolicy: ClusterFirstWithHostNet
      
      # Run on edge nodes preferably
      nodeSelector:
        node-role.kubernetes.io/edge: "true"
      
      tolerations:
      - key: node-role.kubernetes.io/edge
        effect: NoSchedule
      
      securityContext:
        runAsUser: 99
        runAsGroup: 99
        fsGroup: 99
      
      containers:
      - name: haproxy
        image: haproxytech/haproxy-alpine:3.0.2  # Latest LTS
        imagePullPolicy: IfNotPresent
        
        securityContext:
          capabilities:
            drop:
            - ALL
            add:
            - NET_BIND_SERVICE  # Bind to privileged ports
            - NET_RAW          # For keepalived VRRP if needed
        
        resources:
          requests:
            memory: "512Mi"
            cpu: "1"
          limits:
            memory: "2Gi"
            cpu: "4"
        
        env:
        - name: HAPROXY_MWORKER
          value: "1"  # Master-worker mode
        
        ports:
        - name: http
          containerPort: 80
          hostPort: 80
        - name: https
          containerPort: 443
          hostPort: 443
        - name: stats
          containerPort: 8404
          hostPort: 8404
        - name: fix
          containerPort: 8201
          hostPort: 8201
        
        volumeMounts:
        - name: haproxy-config
          mountPath: /usr/local/etc/haproxy
        - name: tls-certs
          mountPath: /etc/ssl/certs
          readOnly: true
        
        livenessProbe:
          httpGet:
            path: /stats
            port: 8404
          initialDelaySeconds: 10
          periodSeconds: 10
        
        readinessProbe:
          httpGet:
            path: /stats
            port: 8404
          initialDelaySeconds: 5
          periodSeconds: 5
      
      # Prometheus exporter sidecar
      - name: haproxy-exporter
        image: quay.io/prometheus/haproxy-exporter:v0.15.0
        args:
        - --haproxy.scrape-uri=http://localhost:8404/stats?stats;csv
        
        resources:
          requests:
            memory: "64Mi"
            cpu: "100m"
          limits:
            memory: "128Mi"
            cpu: "200m"
        
        ports:
        - name: metrics
          containerPort: 9101
      
      volumes:
      - name: haproxy-config
        configMap:
          name: haproxy-config
      - name: tls-certs
        secret:
          secretName: nexlify-tls-certs
          optional: true
---
# Ingress routing rules
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: nexlify-ingress
  namespace: nexlify-trading
  annotations:
    haproxy.org/load-balance: "leastconn"
    haproxy.org/timeout-http-request: "10s"
    haproxy.org/rate-limit: "100"  # Per IP rate limiting
    haproxy.org/ssl-redirect: "true"
spec:
  ingressClassName: haproxy
  tls:
  - hosts:
    - api.nexlify.chrome
    secretName: nexlify-tls-certs
  rules:
  - host: api.nexlify.chrome
    http:
      paths:
      # Trading API endpoints
      - path: /api/v1/trade
        pathType: Prefix
        backend:
          service:
            name: nexlify-trading-service
            port:
              number: 80
      # ML inference endpoints
      - path: /api/v1/predict
        pathType: Prefix
        backend:
          service:
            name: ml-inference-service
            port:
              number: 8080
      # Market data streaming
      - path: /api/v1/stream
        pathType: Prefix
        backend:
          service:
            name: nexlify-trading-service
            port:
              number: 80
